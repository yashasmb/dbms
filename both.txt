CREATE TABLE PUBLISHER (
    NAME VARCHAR2(20),
    PHONE INTEGER,
    ADDRESS VARCHAR2(20),
    CONSTRAINT PKP PRIMARY KEY(NAME)
);

CREATE TABLE BOOK (
    BOOK_ID VARCHAR(8),
    TITLE VARCHAR2(20),
    PUBLISHER_NAME VARCHAR(20),
    PUB_YEAR INTEGER,
    CONSTRAINT PKB PRIMARY KEY(BOOK_ID),
    CONSTRAINT FKB FOREIGN KEY(PUBLISHER_NAME) REFERENCES PUBLISHER(NAME)
);

CREATE TABLE BOOK_AUTHORS (
    BOOK_ID VARCHAR(8),
    AUTHOR_NAME VARCHAR2(20),
    CONSTRAINT PKBA PRIMARY KEY (BOOK_ID, AUTHOR_NAME),
    CONSTRAINT FKBA FOREIGN KEY(BOOK_ID) REFERENCES BOOK(BOOK_ID) ON DELETE CASCADE
);

CREATE TABLE LIBRARY_BRANCH (
    BRANCH_ID VARCHAR(6),
    BRANCH_NAME VARCHAR2(20),
    ADDRESS VARCHAR2(20),
    CONSTRAINT PKLB PRIMARY KEY(BRANCH_ID)
);

CREATE TABLE BOOK_COPIES (
    BOOK_ID VARCHAR(8),
    BRANCH_ID VARCHAR2(6),
    NO_OF_COPIES INTEGER,
    CONSTRAINT PKBC PRIMARY KEY(BOOK_ID, BRANCH_ID),
    CONSTRAINT FKBC FOREIGN KEY(BOOK_ID) REFERENCES BOOK(BOOK_ID) ON DELETE CASCADE,
    CONSTRAINT FKBB FOREIGN KEY(BRANCH_ID) REFERENCES LIBRARY_BRANCH(BRANCH_ID)
);

CREATE TABLE BOOK_LENDING (
    BOOK_ID VARCHAR(8),
    BRANCH_ID VARCHAR2(6),
    CARD_NO INTEGER,
    DATE_OUT DATE,
    DUE_DATE DATE,
    CONSTRAINT PKBL PRIMARY KEY(BOOK_ID, BRANCH_ID, CARD_NO),
    CONSTRAINT FKBL FOREIGN KEY(BOOK_ID) REFERENCES BOOK(BOOK_ID) ON DELETE CASCADE,
    CONSTRAINT FKBLB FOREIGN KEY(BRANCH_ID) REFERENCES LIBRARY_BRANCH(BRANCH_ID) ON DELETE CASCADE
);

1.
SELECT 
    B.BOOK_ID, 
    B.TITLE, 
    B.PUBLISHER_NAME, 
    A.AUTHOR_NAME,
    C.NO_OF_COPIES, 
    L.BRANCH_ID
FROM 
    BOOK B,
    BOOK_AUTHORS A,
    BOOK_COPIES C,
    LIBRARY_BRANCH L
WHERE 
    B.BOOK_ID = A.BOOK_ID
    AND B.BOOK_ID = C.BOOK_ID
    AND L.BRANCH_ID = C.BRANCH_ID;


2.
SELECT CARD_NO
FROM BOOK_LENDING
WHERE DATE_OUT BETWEEN '01-JAN-2017' AND '01-JUL-2017'
GROUP BY CARD_NO
HAVING COUNT(*) > 3;


3.
DELETE FROM BOOK 
WHERE BOOK_ID=3;

4.
CREATE TABLE BOOKPART
PARTITION BY RANGE (PUB_YEAR)
(
    PARTITION P1 VALUES LESS THAN (2016),
    PARTITION P2 VALUES LESS THAN (MAXVALUE)
)
AS 
SELECT * FROM BOOK;

SQL> SELECT * FROM BOOKPART PARTITION (P1);


5.
CREATE VIEW BC AS
SELECT
    B.BOOK_ID,
    C.TITLE,
    B.BRANCH_ID,
    (B.NO_OF_COPIES - (SELECT COUNT(*) 
		       FROM BOOK_LENDING 
			WHERE B.BOOK_ID = BOOK_ID 
			AND 
			B.BRANCH_ID = BRANCH_ID)
			) AS NO_COPY
FROM
    BOOK_COPIES B,
    BOOK C
WHERE
    B.BOOK_ID = C.BOOK_ID;





2nd pg

CREATE TABLE SALESMAN (
    SALESMAN_ID NUMBER(4),
    NAME VARCHAR2(20),
    CITY VARCHAR2(20),
    COMMISSION VARCHAR2(20),
    PRIMARY KEY (SALESMAN_ID)
);

CREATE TABLE CUSTOMER1 (
    CUSTOMER_ID NUMBER(4),
    CUST_NAME VARCHAR2(20),
    CITY VARCHAR2(20),
    GRADE NUMBER(3),
    PRIMARY KEY (CUSTOMER_ID),
    SALESMAN_ID NUMBER(4) REFERENCES SALESMAN (SALESMAN_ID) ON DELETE SET NULL
);

CREATE TABLE ORDERS (
    ORD_NO NUMBER(5),
    PURCHASE_AMT NUMBER(10, 2),
    ORD_DATE DATE,
    PRIMARY KEY (ORD_NO),
    CUSTOMER_ID NUMBER(4) REFERENCES CUSTOMER1 (CUSTOMER_ID) ON DELETE CASCADE,
    SALESMAN_ID NUMBER(4) REFERENCES SALESMAN (SALESMAN_ID) ON DELETE CASCADE
);

INSERT INTO SALESMAN VALUES (1000, 'JOHN', 'BANGALORE', '25%');
INSERT INTO SALESMAN VALUES (2000, 'RAVI', 'BANGALORE', '20%');
INSERT INTO SALESMAN VALUES (3000, 'KUMAR', 'MYSORE', '15%');
INSERT INTO SALESMAN VALUES (4000, 'SMITH', 'DELHI', '30%');
INSERT INTO SALESMAN VALUES (5000, 'HARSHA', 'HYDERABAD', '15%');

INSERT INTO CUSTOMER VALUES ('C1', 'PREETHI','BANGALORE', 100, '1000');
INSERT INTO CUSTOMER VALUES ('C2', 'VIVEK','MANGALORE', 300, '1000');
INSERT INTO CUSTOMER VALUES ('C3', 'BHASKAR','CHENNAI', 400, '2000');
INSERT INTO CUSTOMER VALUES ('C4', 'CHETHAN','BANGALORE', 200, '2000');
INSERT INTO CUSTOMER VALUES ('C5', 'MAMATHA','BANGALORE', 400, '3000');

INSERT INTO ORDERS VALUES ('O1', 5000, '04-MAY-17', 'C1', '1000');
INSERT INTO ORDERS VALUES ('O2', 6000, '04-MAY-17', 'C1', '1000');
INSERT INTO ORDERS VALUES ('O3', 7000, '04-MAY-17', 'C2', '1000');
INSERT INTO ORDERS VALUES ('O4', 450, '20-JAN-17', 'C1', '2000');
INSERT INTO ORDERS VALUES ('O5', 1000, '24-FEB-17', 'C2','2000');
INSERT INTO ORDERS VALUES ('O6', 3500, '13-APR-17', 'C3', '3000');
INSERT INTO ORDERS VALUES ('O7', 550, '09-MAR-17', 'C4', 2000);
INSERT INTO ORDERS VALUES ('O8', 6500, '04-MAY-17', 'C5', 1000);
INSERT INTO ORDERS VALUES ('O9', 7500, '09-MAR-17', 'C2', 2000)

1.
SELECT
    GRADE,
    COUNT(DISTINCT CUSTOMER_ID) AS NO_OF_CUSTOMER
FROM
    CUSTOMER
GROUP BY
    GRADE
HAVING
    GRADE > (
        SELECT AVG(GRADE)
        FROM CUSTOMER
        WHERE CITY = 'BANGALORE'
    );


2.
SELECT
    SALESMAN_ID,
    NAME
FROM
    SALESMAN S
WHERE
    (
        (SELECT COUNT(*)
         FROM CUSTOMER
         WHERE SALESMAN_ID = S.SALESMAN_ID
        ) > 1
    );


3.
SELECT S.SALESMAN_ID, S.CITY
FROM SALESMAN S
WHERE EXISTS (
    SELECT CITY
    FROM CUSTOMER
    WHERE S.CITY = CITY AND S.SALESMAN_ID = SALESMAN_ID
)
UNION
SELECT SALESMAN_ID, 'NO MATCH OF CITIES'
FROM SALESMAN S
WHERE NOT EXISTS (
    SELECT CITY
    FROM CUSTOMER
    WHERE S.CITY = CITY AND S.SALESMAN_ID = SALESMAN_ID
);


4.
SELECT DISTINCT
    S.SALESMAN_ID,
    S.ORD_DATE
FROM
    ORDERS S
WHERE
    (
        SELECT SUM(PURCHASE_AMT)
        FROM ORDERS
        WHERE
            SALESMAN_ID = S.SALESMAN_ID
            AND ORD_DATE = S.ORD_DATE
            AND S.CUSTOMER_ID = CUSTOMER_ID
    ) = (
        SELECT MAX(SUM(PURCHASE_AMT))
        FROM ORDERS S1
        WHERE S1.ORD_DATE = S.ORD_DATE
        GROUP BY S1.ORD_DATE, S1.SALESMAN_ID, S1.CUSTOMER_ID
    );


5.
DELETE FROM SALESMAN
 WHERE SALESMAN_ID=1000;
